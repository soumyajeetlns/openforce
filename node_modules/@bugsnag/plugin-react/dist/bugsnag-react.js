(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.bugsnag__react = f()}})(function(){var define,module,exports;
var _$src_1 = {};
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

_$src_1 = {
  name: 'react',
  init: function (client, React) {
    if (React === void 0) {
      React = window.React;
    }

    if (!React) throw new Error('cannot find React');

    var ErrorBoundary =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(ErrorBoundary, _React$Component);

      function ErrorBoundary(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this.state = {
          error: null,
          info: null
        };
        return _this;
      }

      var _proto = ErrorBoundary.prototype;

      _proto.componentDidCatch = function componentDidCatch(error, info) {
        var beforeSend = this.props.beforeSend;
        var BugsnagReport = client.BugsnagReport;
        var handledState = {
          severity: 'error',
          unhandled: true,
          severityReason: {
            type: 'unhandledException'
          }
        };
        var report = new BugsnagReport(error.name, error.message, BugsnagReport.getStacktrace(error), handledState);
        if (info && info.componentStack) info.componentStack = formatComponentStack(info.componentStack);
        report.updateMetaData('react', info);
        client.notify(report, {
          beforeSend: beforeSend
        });
        this.setState({
          error: error,
          info: info
        });
      };

      _proto.render = function render() {
        var error = this.state.error;

        if (error) {
          var FallbackComponent = this.props.FallbackComponent;
          if (FallbackComponent) return React.createElement(FallbackComponent, this.state);
          return null;
        }

        return this.props.children;
      };

      return ErrorBoundary;
    }(React.Component);

    return ErrorBoundary;
  }
};

var formatComponentStack = function (str) {
  var lines = str.split(/\s*\n\s*/g);
  var ret = '';

  for (var line = 0, len = lines.length; line < len; line++) {
    if (lines[line].length) ret += "" + (ret.length ? '\n' : '') + lines[line];
  }

  return ret;
};

_$src_1.formatComponentStack = formatComponentStack;
_$src_1['default'] = _$src_1;

return _$src_1;

});
//# sourceMappingURL=bugsnag-react.js.map
